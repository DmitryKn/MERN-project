{"version":3,"sources":["Shared/Context/auth-context.js","Shared/Components/UIElements/LoadingSpinner.js","Shared/Components/UIElements/Backdrop.js","App.js","Shared/Components/Navigation/MainHeader.js","Shared/Components/Navigation/NavLinks.js","Shared/Components/Navigation/SideDrawer.js","Shared/Components/Navigation/MainNavigation.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","logoutTimer","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","Users","React","lazy","UserPlaces","NewPlace","UpdatePlace","Authentication","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","path","component","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.0d643b8e.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  userId: null,\r\n  token: null,\r\n  login: () => {},\r\n  logout: () => {}\r\n});\r\n\r\n/*\r\n  1) create Context\r\n\r\n  Обветрка в Аpp\r\n  2) add {myContext} to App\r\n  3) wrap with <myContext.Provider value={}> all elements + {useState} + create functions to use\r\n\r\n  В компонентах где нам необходимо использовать стейт:\r\n  4) add { useContext } + {myContext}\r\n    const varName = useContext(myContext);\r\n\r\n    return\r\n    {varName.myProp && <button> }\r\n\r\n  */\r\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./Backdrop.css\";\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById(\"backdrop-hook\")\n  );\n};\n\nexport default Backdrop;\n","import React, { useState, useCallback, useEffect, Suspense } from \"react\";\n\nimport MainNavigation from \"./Shared/Components/Navigation/MainNavigation\";\n//import Users from \"./Users/Pages/Users\";\n//import UserPlaces from \"./Places/Pages/UserPlaces\";\n//import NewPlace from \"./Places/Pages/NewPlace\";\n//import UpdatePlace from \"./Places/Pages/UpdatePlace\";\n//import Authentication from \"./Users/Pages/Auth\";\nimport { AuthContext } from \"./Shared/Context/auth-context\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport LoadingSpinner from \"./Shared/Components/UIElements/LoadingSpinner\";\n\n//lazy load content for routing + wrapping routes with <Suspense>\nconst Users = React.lazy(() => import(\"./Users/Pages/Users\"));\nconst UserPlaces = React.lazy(() => import(\"./Places/Pages/UserPlaces\"));\nconst NewPlace = React.lazy(() => import(\"./Places/Pages/NewPlace\"));\nconst UpdatePlace = React.lazy(() => import(\"./Places/Pages/UpdatePlace\"));\nconst Authentication = React.lazy(() => import(\"./Users/Pages/Auth\"));\n\nlet logoutTimer;\n\nconst App = () => {\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(false);\n\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    // 1 hour auto-logout\n    const tokenExpirationDate =\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDate(tokenExpirationDate);\n    //save data in Local storage\n    localStorage.setItem(\n      \"userData\",\n      JSON.stringify({\n        userId: uid,\n        token: token,\n        expiration: tokenExpirationDate.toISOString()\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpirationDate(null);\n    setUserId(null);\n    localStorage.removeItem(\"userData\"); //remove token\n  }, []);\n\n  //autologout\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime =\n        tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n\n  //autologin. If some data in local storage, do login.\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (\n      storedData &&\n      storedData.token &&\n      new Date(storedData.expiration) > new Date()\n    ) {\n      login(\n        storedData.userId,\n        storedData.token,\n        new Date(storedData.expiration)\n      );\n    }\n  }, [login]);\n\n  let routes;\n  if (token) {\n    routes = (\n      <Switch>\n        <Route exact path=\"/\" component={Users} />\n        <Route exact path=\"/:userId/places\" component={UserPlaces} />\n        <Route exact path=\"/places/new\" component={NewPlace} />\n        <Route exact path=\"/places/:placeId\" component={UpdatePlace} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route exact path=\"/\" component={Users} />\n        <Route exact path=\"/:userId/places\" component={UserPlaces} />\n        <Route exact path=\"/auth\" component={Authentication} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <div>\n      <AuthContext.Provider\n        value={{\n          isLoggedIn: !!token,\n          token: token,\n          userId: userId,\n          login: login,\n          logout: logout\n        }}\n      >\n        <MainNavigation />\n        <main>\n          <Suspense\n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </AuthContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\r\n\r\nimport \"./MainHeader.css\";\r\n\r\nconst MainHeader = props => {\r\n  return <header className=\"main-header\">{props.children}</header>;\r\n};\r\n\r\nexport default MainHeader;\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../Context/auth-context\";\r\nimport \"./NavLinks.css\";\r\n\r\nconst NavLinks = props => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  return (\r\n    <ul className=\"nav-links\">\r\n      <li>\r\n        <NavLink to=\"/\" exact>\r\n          ALL USERS\r\n        </NavLink>\r\n      </li>\r\n      {auth.isLoggedIn && ( //will see only if user logged in\r\n        <li>\r\n          <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && ( //will see only if user logged in\r\n        <li>\r\n          <NavLink to=\"/places/new\">ADD PLACE</NavLink>\r\n        </li>\r\n      )}\r\n      {!auth.isLoggedIn && ( //will see only if user NOT logged in\r\n        <li>\r\n          <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\r\n        </li>\r\n      )}\r\n      {auth.isLoggedIn && (\r\n        <li>\r\n          <button onClick={auth.logout}>LOGOUT</button>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport \"./SideDrawer.css\";\r\n\r\nconst SideDrawer = props => {\r\n  const content = (\r\n    <CSSTransition\r\n      in={props.show}\r\n      timeout={500}\r\n      classNames=\"slide-in-left\"\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <aside className=\"side-drawer\" onClick={props.onClick}>\r\n        {props.children}\r\n      </aside>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById(\"drawer-hook\"));\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MainHeader from \"./MainHeader\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from \"./SideDrawer\";\r\nimport Backdrop from \"../UIElements/Backdrop\";\r\nimport \"./MainNavigation.css\";\r\n\r\nconst MainNavigation = props => {\r\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n  const openDrawerHandler = () => {\r\n    setDrawerIsOpen(true);\r\n  };\r\n\r\n  const closeDrawerHandler = () => {\r\n    setDrawerIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}\r\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n        <nav className=\"main-navigation__drawer-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </SideDrawer>\r\n\r\n      <MainHeader>\r\n        <button\r\n          className=\"main-navigation__menu-btn\"\r\n          onClick={openDrawerHandler}\r\n        >\r\n          <span />\r\n          <span />\r\n          <span />\r\n        </button>\r\n        <h1 className=\"main-navigation__title\">\r\n          <Link to=\"/\">YourPlaces</Link>\r\n        </h1>\r\n        <nav className=\"main-navigation__header-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </MainHeader>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MainNavigation;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n    <App />\n</BrowserRouter>\n, document.getElementById('root'));\n"],"sourceRoot":""}